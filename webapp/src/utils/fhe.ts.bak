// FHE SDK utilities implementation following FHE_COMPLETE_GUIDE_FULL_CN.md

// Global singleton
let fheInstance: any = null;
let initPromise: Promise<any> | null = null;

/**
 * Sepolia network configuration
 */
export const SepoliaConfig = {
  chainId: 11155111,
  rpcUrl: "https://ethereum-sepolia-rpc.publicnode.com",
  chainName: "Sepolia"
};

/**
 * Initialize FHE SDK
 * ‚úÖ Will only initialize once
 * ‚úÖ Concurrent calls will wait for the same Promise
 */
export async function initializeFHE(): Promise<any> {
  // ‚úÖ If instance exists, return immediately
  if (fheInstance) {
    console.log('‚úÖ FHE SDK already initialized (using cache)');
    return fheInstance;
  }

  // ‚úÖ If initializing, wait for the same Promise
  if (initPromise) {
    console.log('‚è≥ FHE SDK is initializing (waiting)');
    return initPromise;
  }

  // üîë Create initialization Promise (will only execute once)
  initPromise = (async () => {
    try {
      console.log('üîÑ Starting FHE SDK initialization...');
      const startTime = performance.now();

      // Check if window.relayerSDK is available (loaded from CDN)
      const w = window as any;
      if (!w.relayerSDK) {
        throw new Error('FHE SDK not loaded, please check if index.html includes relayer-sdk-js.js script');
      }

      console.log('‚úÖ Using SDK loaded from CDN');

      // üîë Key optimization: avoid duplicate WASM initialization
      if (w.relayerSDK.__initialized__ !== true) {
        console.log('üîÑ Initializing WASM...');
        await w.relayerSDK.initSDK();
        w.relayerSDK.__initialized__ = true;
        console.log('‚úÖ WASM initialization complete');
      } else {
        console.log('‚úÖ WASM already initialized (skipped)');
      }

      fheInstance = await w.relayerSDK.createInstance(SepoliaConfig);

      const endTime = performance.now();
      console.log(`‚úÖ FHE SDK initialization complete, time: ${(endTime - startTime).toFixed(0)}ms`);

      return fheInstance;
    } catch (error) {
      console.error('‚ùå FHE SDK initialization failed:', error);
      initPromise = null; // Reset to allow retry
      throw error;
    }
  })();

  return await initPromise;
}

/**
 * Get FHE instance (auto-initialize if not initialized)
 */
export async function getFHEInstance(): Promise<any> {
  return await initializeFHE();
}

/**
 * Standard flow to encrypt a single uint64 value
 */
export async function encryptValue(
  value: bigint,
  contractAddress: string,
  userAddress: string
): Promise<{ handle: string; proof: string }> {
  const fhe = await getFHEInstance();

  // Create encrypted input
  const input = fhe.createEncryptedInput(contractAddress, userAddress);

  // Encrypt uint64 value
  input.add64(value);

  // Generate handle and proof
  const { handles, inputProof } = await input.encrypt();

  return {
    handle: handles[0],
    proof: inputProof
  };
}

/**
 * Reset FHE instance (for testing or forced reload)
 */
export function resetFHEInstance(): void {
  fheInstance = null;
  initPromise = null;
  console.log('üîÑ FHE instance has been reset');
}
